# Задача 10: На столе лежат n монеток. Некоторые из них лежат вверх решкой, 
# а некоторые – гербом. Определите минимальное число монеток, 
# которые нужно перевернуть, чтобы все монетки были повернуты вверх одной и 
# той же стороной. Выведите минимальное количество монет, 
# которые нужно перевернуть

# n = int(input("Введите количество монеток: "))
# reshka_count = 0
# gerb_count = 0

# for i in range(n):
#     side = int(input(f"Введите сторону монетки (0 - решка, 1 - герб): "))
#     if side == 0:
#         reshka_count += 1
#     else:
#         gerb_count += 1

# min_coins = min(reshka_count, gerb_count)
# print(f"Минимальное количество монет, которые нужно перевернуть: {min_coins}")

# Задача 12: Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. 
# Петя помогает Кате по математике. Он задумывает два натуральных числа
# X и Y (X,Y≤1000), а Катя должна их отгадать. 
# Для этого Петя делает две подсказки. Он называет сумму этих чисел S и
# их произведение P.                           
# Помогите Кате отгадать задуманные Петей числа.


# s = int(input('Задай сумму двух чисел: '))
# p = int(input('Задай произведение чисел: '))
 
# found_numbers = False
 
# for x in range(1, s):
#     for y in range(1, s):
#         if s == x + y and p == x * y:
#             print(f'Первое число: {x}, второе число: {y}')
#             found_numbers = True
 
# if not found_numbers:
#     print('Числа X и Y не удалось найти.')

# Задача 14: Требуется вывести все целые степени двойки (т.е. числа вида 2k), 
# не превосходящие числа N.

# N = int(input("Введите число N: "))

# k = 1
# degree_of_two = 2

# while degree_of_two <= N:
#     print(degree_of_two)
#     k += 1
#     degree_of_two = 2 ** k

# Задача 22: Даны два неупорядоченных набора целых чисел 
# (может быть, с повторениями). Выдать без повторений в порядке возрастания 
# все те числа, которые встречаются в обоих наборах. 
# Пользователь вводит 2 числа. n - кол-во элементов первого множества. 
# m - кол-во элементов второго множества. 
# Затем пользователь вводит сами элементы множеств.

# Пример:
# 11 6 
# 2 4 6 8 10 12 10 8 6 4 2 3 6 9 12 15 18 
# 6 12

# n = int(input("Введите количество элементов первого множества: "))
# set1 = set()

# for i in range(n):
#     element = int(input(f"Введите элемент {i+1} первого множества: "))
#     set1.add(element)

# m = int(input("Введите количество элементов второго множества: "))
# set2 = set()

# for i in range(m):
#     element = int(input(f"Введите элемент {i+1} второго множества: "))
#     set2.add(element)

# common_elements = sorted(set1.intersection(set2))
# for num in common_elements:
#     print(num)
 
# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. 
# Она растет на круглой грядке, причем кусты высажены только по окружности. 
# Таким образом, у каждого куста есть ровно два соседних. 
# Всего на грядке растет N кустов. Эти кусты обладают разной урожайностью, 
# поэтому ко времени сбора на них выросло различное число ягод – на i-ом кусте 
# выросло ai ягод. В этом фермерском хозяйстве внедрена система автоматического 
# сбора черники. Эта система состоит из управляющего модуля и нескольких 
# собирающих модулей. Собирающий модуль за один заход, находясь непосредственно 
# перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним. 
# Напишите программу для нахождения максимального числа ягод, которое может 
# собрать за один заход собирающий модуль, 
# находясь перед некоторым кустом заданной во входном файле грядки.

# N = int(input("Введите количество кустов черники: "))
# a = []
# for i in range(N):
#     a.append(int(input("Введите урожайность куста черники: ")))

# max_berries = 0

# for i in range(N):
#     total_berries = a[i] + a[(i-1) % N] + a[(i+1) % N]
#     if total_berries > max_berries:
#         max_berries = total_berries

# print("Максимальное количество ягод:", max_berries)


# Задача 30:  Заполните массив элементами арифметической прогрессии. 
# Её первый элемент, разность и количество элементов нужно ввести с клавиатуры. 
# Формула для получения n-го члена прогрессии: an = a1 + (n-1) * d.
# Каждое число вводится с новой строки.

# a1 = int(input("Введите первый элемент прогрессии: \n"))
# d = int(input("Введите разность прогрессии: \n"))
# n = int(input("Введите количество элементов: \n"))

# progression = []

# for i in range(n):
#     an = a1 - (i * d)
#     progression.append(an)

# for an in progression:
#     print(an)



# Задача 32: Определить индексы элементов массива (списка), 
# значения которых принадлежат заданному диапазону 
# (т.е. не меньше заданного минимума и не больше заданного максимума)

# arr = list(map(int, input("Введите элементы массива через пробел: ").split()))
# min_val = int(input("Введите минимальное значение: "))
# max_val = int(input("Введите максимальное значение: "))

# elements = []

# for i in range(len(arr)):
#     if arr[i] >= min_val and arr[i] <= max_val:
#         elements.append(i)

# print("Индексы элементов, значения которых принадлежат заданному диапазону:")
# for index in elements:
#     print(index)

# Задача 34:  Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
# Поскольку разобраться в его кричалках не настолько просто, насколько легко 
# он их придумывает, Вам стоит написать программу. Винни-Пух считает, 
# что ритм есть, если число слогов (т.е. число гласных букв) в каждой фразе 
# стихотворения одинаковое. Фраза может состоять из одного слова,
# если во фразе несколько слов, то они разделяются дефисами. 
# Фразы отделяются друг от друга пробелами. Стихотворение  Винни-Пух вбивает в 
# программу с клавиатуры. В ответе напишите “Парам пам-пам”, если с ритмом все 
# в порядке и “Пам парам”, если с ритмом все не в порядке

# *Пример:*

# **Ввод:** пара-ра-рам рам-пам-папам па-ра-па-да    
#     **Вывод:** Парам пам-пам  
poem_input = input("Введите стихотворение: ")

def rhythm(poem):
    poem = poem.split()
    vowel_counts = []
    for word in poem:
        count = 0
        for letter in word:
            if letter in 'аеёиоуыэюя':
                count += 1
        vowel_counts.append(count)
    return len(vowel_counts) == vowel_counts.count(vowel_counts[0])

if rhythm(poem_input):
    print('Парам пам-пам')
else:
    print('Пам парам')